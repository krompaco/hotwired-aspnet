@page "/globalmessageform"

@inject FormDataProvider FormData
@inject ILogger<GlobalMessageForm> Logger
@inject SiteComponentRenderer ComponentRenderer
@inject IHubContext<AppHub> hub

<PageTitle>Global message form page</PageTitle>

<Content>
    <div class="bg-white rounded shadow p-4">
        <h1 class="font-semibold tracking-tight text-xl">Turbo frame in other page test</h1>

        <p class="mt-2">This page is typically not used on it's own. The Turbo Frame starts after this text.</p>

        <turbo-frame id="js-global-message-form" aria-live="polite">
            @* Accessibility-wise it's most likely better to just set HTML required attributes on the inputs but I want to have a sample of model validation in here too *@
            @*@await Component.InvokeAsync("ValidationSummary", this.Model)*@

            <EditForm method="post" Model="globalMessageFormModel" OnValidSubmit="HandleSubmit" class="space-y-6 mt-4">
                <div>
                    <label class="block" for="message-1"></label>
                    <InputText @bind-Value="globalMessageFormModel.Message" id="message-1" class="mt-2" type="text" />
                </div>
                <div>
                    <button type="submit" class="button-primary">Send message</button>
                </div>
            </EditForm>
        </turbo-frame>
    </div>
</Content>

@code {
    GlobalMessageFormModel globalMessageFormModel = new();

    protected override void OnInitialized()
    {
        // Manually model bind the form data using the FormDataProvider service
        if (FormData.Entries.TryGetValue("Message", out var messageValues))
        {
            globalMessageFormModel.Message = messageValues.First();
        }
    }

    async Task HandleSubmit()
    {
        Logger.LogInformation("Hello from GlobalMessage.HandleSubmit()");

        ////if (!this.ModelState.IsValid)
        ////{
        ////    // This follows the recommendation to set status = 422 for validation errors
        ////    this.Response.SetTurboValidationErrorStatus(this.Request);
        ////    return result;
        ////}

        var alertModel = new Models.Alert(globalMessageFormModel.Message!);
        var alertDictionary = new Dictionary<string, object?>
                                {
                                    { "AlertModel", alertModel },
                                };
        var html = await this.ComponentRenderer.GetAsHtmlAsync<Shared.Alert>(alertDictionary);

        var alertMessage = new TurboStreamMessage
            {
                Action = TurboStreamAction.Update,
                Target = "js-alert-target",
                TemplateInnerHtml = html,
            };

        await this.hub.Clients.All.SendAsync("GlobalMessageReceived", alertMessage.ToString());
    }
}
