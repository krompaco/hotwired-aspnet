@page
@model IndexModel

@{
    ViewData["Title"] = "Index page";
}

<h1 class="font-semibold tracking-tight text-3xl">@ViewData["Title"]</h1>

<p class="mt-5">A simple Razor Pages app showing how to use some features from Turbo and Stimulus.</p>

<p class="mt-5">
    <a href="https://github.com/krompaco/hotwired-aspnet" class="inline-flex items-center link-primary">
        <svg class="flex-none mr-1" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M15 22v-4a4.8 4.8 0 0 0-1-3.5c3 0 6-2 6-5.5.08-1.25-.27-2.48-1-3.5.28-1.15.28-2.35 0-3.5 0 0-1 0-3 1.5-2.64-.5-5.36-.5-8 0C6 2 5 2 5 2c-.3 1.15-.3 2.35 0 3.5A5.403 5.403 0 0 0 4 9c0 3.5 3 5.5 6 5.5-.39.49-.68 1.05-.85 1.65-.17.6-.22 1.23-.15 1.85v4"></path><path d="M9 18c-4.51 2-5-2-7-2"></path></svg>
        <span class="flex-none">
            Source code on GitHub
        </span>
    </a>
</p>

<div class="mt-10 bg-white rounded shadow p-4">
    <h2 class="font-semibold tracking-tight text-xl">Turbo Streams and Frames showcase: Player Database</h2>
    <p class="mt-2">A <a class="link-primary" asp-page="PlayerList"><em class="font-bold not-italic">separate page</em> showing some capabilities</a> and a smooth way of using View Components to keep markup DRY.</p>
</div>

<div class="mt-10 bg-white rounded shadow p-4">
    <h2 class="font-semibold tracking-tight text-xl">Very simple Stimulus example controller test</h2>
    <div class="mt-2">
        <p data-controller="example">Original content from server response.</p>
    </div>
    <p class="mt-2">I recommend learning more here: <a class="link-primary" href="https://github.com/excid3/tailwindcss-stimulus-components"><em class="font-bold not-italic">Tailwind CSS Stimulus Components</em> by excid3 on GitHub</a></p>
</div>

<div class="mt-10 bg-white rounded shadow p-4">
    <h2 class="font-semibold tracking-tight text-xl">Web socket test (also set up in Stimulus example controller)</h2>
    <div class="mt-2">
        <div id="stream-test">Original content from server response.</div>
    </div>
    <p class="mt-2"><a class="link-primary" asp-page="WebSocketMessage" target="_blank"><em class="font-bold not-italic">Stream test page</em> that will update text (open in new window)</a></p>
</div>

<div class="mt-10 bg-white rounded shadow p-4">
    <h2 class="font-semibold tracking-tight text-xl">Turbo frame in same page test</h2>

    <p class="mt-2">This form posts and keeps the values in temp data so we can show them after a 303 redirect which is the recommendation.</p>

    <turbo-frame id="js-turbo-frame-same-page" aria-live="polite">
        @if (Model.TempStoredForm == null)
        {
            @* Accessibility-wise it's most likely better to just set HTML required attributes on the inputs but I want to have a sample of model validation in here too *@
            @await Component.InvokeAsync("ValidationSummary", this.Model)

            <form asp-page="Index" method="post" class="space-y-6 mt-4">
                <div>
                    <label class="block" asp-for="IndexForm.Name"></label>
                    <input class="mt-2" asp-for="IndexForm.Name" type="text">
                </div>

                <div>
                    <label class="block" asp-for="IndexForm.Company"></label>
                    <input class="mt-2" asp-for="IndexForm.Company" type="text">
                </div>

                <div>
                    <button type="submit" class="button-primary">Submit form</button>
                </div>
            </form>
        }

        @if (Model.TempStoredForm != null)
        {
            <h3 class="mt-2 text-green-700 text-lg">Hi <em class="font-bold not-italic">@(Model.TempStoredForm.Name?.Trim())</em> from <em class="font-bold not-italic">@(Model.TempStoredForm.Company?.Trim())</em>!</h3>

            if (this.ViewContext.HttpContext.Request.IsTurbo())
            {
                @await Component.InvokeAsync("Alert", new Alert($"Hi {Model.TempStoredForm.Name?.Trim()} from {Model.TempStoredForm.Company?.Trim()}", AlertType.Information))
            }

            <p class="mt-2"><a href="/?action=new" class="link-primary">Enter new data</a></p>
        }
    </turbo-frame>
</div>

<div class="mt-10 bg-white rounded shadow p-4">
    <h2 class="font-semibold tracking-tight text-xl">Turbo frame in other page test</h2>

    <p class="mt-2">This form responds with Turbo Frame content from a <a class="link-primary" asp-page="TurboFrameExample">Turbo frame in other page</a>.</p>

    <turbo-frame id="js-turbo-frame-other-page" aria-live="polite" src="/TurboFrameExample" loading="lazy">
        @await Component.InvokeAsync("Spinner")
    </turbo-frame>
</div>

<div class="mt-10 bg-white rounded shadow p-4">
    <div class="prose">
        <h2>Typography example from <a href="https://www.cipsum.com/">Corporate Ipsum</a></h2>

        <p class="lead">Leverage agile frameworks to provide a robust synopsis for high level overviews.</p>

        <p>Iterative approaches to corporate strategy foster collaborative thinking to further the overall value proposition. Organically grow the holistic world view of disruptive innovation via workplace diversity and empowerment.</p>

        <ul>
            <li>Bring to the table win-win survival strategies to ensure proactive domination.</li>
            <li>At the end of the day, going forward, a new normal that has evolved from generation X is on the runway heading towards a streamlined cloud solution.</li>
            <li>User generated content in real-time will have multiple touchpoints for offshoring.</li>
        </ul>

        <p>Capitalize on low hanging fruit to identify a ballpark value added activity to beta test. Override the digital divide with additional clickthroughs from DevOps. Nanotechnology immersion along the information highway will close the loop on focusing solely on the bottom line.</p>
    </div>
</div>
